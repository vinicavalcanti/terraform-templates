AWSTemplateFormatVersion: '2010-09-09'

Description: Crea un pipeline para Infraestructura

## ***************************** Parameters section ************************************
Parameters:

  CodepipelineBucket:
    Description: "Bucket for codepipeline"
    Type: String

  Repository:
    Description: "Repository"
    Type: String

  OAuthToken:
    Description: "OAuth Token"
    Type: String
    NoEcho: true

  Owner:
    Description: "Github Owner"
    Type: String

## ***************************** Resources section ************************************
Resources:

#############################################################################
# CodeBuild: BuildProject: Test Files
# - Utiliza serverless framework para hacer despliegue de funciones serverless

  ValidateConfig:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:7.0.0
        Type: LINUX_CONTAINER
      Name: "codebuild-validate"
      ServiceRole: !Ref CodeBuildRole
      Source:
        BuildSpec: !Sub |
            version: 0.1
            phases:
              install:
                commands:
                  npm install jsonlint -g
              pre_build:
                commands:
                  - ls -l
              build:
                commands:
                  - echo "Validating config files"
                  - |
                      for conf in eks/config/*.json; do
                          echo "Validating CFN parameters config file $conf"
                          jsonlint -q $conf
                      done
                  - echo "Validating Cloudformation template"
                  - |
                      for cfn_template in eks/*.yml; do
                            echo "----------------------"
                            echo "Validating CloudFormation template file $cfn_template"
                            aws cloudformation validate-template --template-body file://$cfn_template
                      done
        Type: CODEPIPELINE

#############################################################################
# CodeBuild: BuildProject: Test Files
# - Utiliza serverless framework para hacer despliegue de funciones serverless

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-cb-validate-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:*
              - codebuild:*
              - cloudformation:ValidateTemplate
            Resource: "*"
          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CodepipelineBucket}"
              - !Sub "arn:aws:s3:::${CodepipelineBucket}/*"
      Roles:
        -
          !Ref CodeBuildRole

############################################################################
# Pipeline: ApplicationPipeline
# - Pipeline Multi-Stage para hacer el release management de una aplicacion

  project:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt PipeLineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            - RunOrder: 1
              Name: SourceFiles
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref Owner
                OAuthToken: !Ref OAuthToken
                Repo: !Ref Repository
                Branch: "master"
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: Repo

        ## Stage de prueba de los templates
        -
          Name: Test
          Actions:
            - RunOrder: 1
              Name: "Test_files"
              InputArtifacts:
                - Name: Repo
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: "codebuild-validate"
              OutputArtifacts: []

        - Name: Dev
          Actions:
            ## Deploy EKS Cluster
            - RunOrder: 1
              Name: EKS-Cluster
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: Repo
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::StackName}-eks"
                TemplatePath: "Repo::eks/eks-vc-cluster.yml"
                TemplateConfiguration: "Repo::eks/config/eks.config.dev.json"
                ParameterOverrides: !Sub |
                  {
                     "Environment" : "dev"
                  }
                RoleArn: !GetAtt CFDeployerRole.Arn

                ## Deploy Worker Nodes
                - RunOrder: 2
                  Name: EKS-WorkerNodes
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  InputArtifacts:
                    - Name: Repo
                  Configuration:
                    ActionMode: CREATE_UPDATE
                    Capabilities: CAPABILITY_IAM
                    StackName: !Sub "${AWS::StackName}-eks-workers"
                    TemplatePath: "Repo::eks/amazon-eks-nodegroup.yml"
                    TemplateConfiguration: "Repo::eks/config/eks.workernodes.config.dev.json"
                    ParameterOverrides: !Sub |
                      {
                         "Environment" : "dev"
                      }
                    RoleArn: !GetAtt CFDeployerRole.Arn

              OutputArtifacts: []

      ArtifactStore:
        Type: S3
        Location: !Ref CodepipelineBucket

############################################################################
# Role: IAM Roles
# - Role required for CodePipeline

  PipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-codepipeline-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
             - codebuild:StartBuild
             - codebuild:BatchGetBuilds
            Resource:
            - "*"
          -
            Effect: Allow
            Action:
              - codepipeline:*
              - iam:ListRoles
              - iam:PassRole
              - s3:ListAllMyBuckets
              - s3:GetBucketLocation
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - cloudformation:Describe*
              - cloudFormation:List*
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CodepipelineBucket}"
              - !Sub "arn:aws:s3:::${CodepipelineBucket}/*"
      Roles:
        - !Ref PipeLineRole


  CFDeployerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  CFDeployerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cloudformationdeployer-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - iam:CreateRole
              - iam:CreatePolicy
              - iam:GetRole
              - iam:DeleteRole
              - iam:PutRolePolicy
              - iam:PassRole
              - iam:DeleteRolePolicy
              - codebuild:*
            Resource: "*"
          -
            Effect: Allow
            Action:
              - cloudformation:Describe*
              - cloudFormation:List*
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - eks:*
              - ec2:*
            Resource:
              - "*"

          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CodepipelineBucket}"
              - !Sub "arn:aws:s3:::${CodepipelineBucket}/*"
      Roles:
        -
          !Ref CFDeployerRole
